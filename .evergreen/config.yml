# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 30 minutes is the longest we'll ever run

# fail a task in case fetching the source or installing Swift fails.
pre_error_fails_task: true

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the submitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export DRIVERS_TOOLS="$(dirname $(pwd))/drivers-tools"
           export PROJECT_DIRECTORY="$(pwd)"

           # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
           if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
              export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
              export PROJECT_DIRECTORY=$(cygpath -m $PROJECT_DIRECTORY)
           fi

           export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
           export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
           export UPLOAD_BUCKET="${project}"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           DRIVERS_TOOLS: "$DRIVERS_TOOLS"
           MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
           MONGODB_BINARIES: "$MONGODB_BINARIES"
           UPLOAD_BUCKET: "$UPLOAD_BUCKET"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export DRIVERS_TOOLS="$DRIVERS_TOOLS"
              export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
              export MONGODB_BINARIES="$MONGODB_BINARIES"
              export UPLOAD_BUCKET="$UPLOAD_BUCKET"
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

              export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
              export PATH="$MONGODB_BINARIES:$PATH"
              export PROJECT="${project}"
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "prepare resources":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS
          if [ "${project}" = "drivers-tools" ]; then
            # If this was a patch build, doing a fresh clone would not actually test the patch
            cp -R ${PROJECT_DIRECTORY}/ $DRIVERS_TOOLS
          else
            git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS
          fi
          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          ORCHESTRATION_FILE=${ORCHESTRATION_FILE} \
            MONGODB_VERSION=${MONGODB_VERSION} \
            TOPOLOGY=${TOPOLOGY} \
            SSL=${SSL} \
            AUTH=${AUTH} \
            REQUIRE_API_VERSION=${REQUIRE_API_VERSION} \
            sh ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml
    - command: expansions.update
      params:
        updates:
          - key: MONGODB_STARTED
            value: "1"

  "stop mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          sh ${DRIVERS_TOOLS}/.evergreen/stop-orchestration.sh

  "upload-mo-artifacts":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          find $MONGO_ORCHESTRATION_HOME -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}

          MONGODB_URI="${MONGODB_URI}" \
          TOPOLOGY=${TOPOLOGY} \
          SSL=${SSL} \
          AUTH=${AUTH} \
          SWIFT_VERSION=${SWIFT_VERSION} \
          MONGODB_API_VERSION=${MONGODB_API_VERSION} \
          TEST_FILTER=${TEST_FILTER} \
            ${PROJECT_DIRECTORY}/.evergreen/run-tests.sh
    
  "upload test results":
    - command: attach.xunit_results
      params:
        file: ./src/testResults.xml

  "run atlas tests":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          SWIFT_VERSION=${SWIFT_VERSION} ATLAS_REPL='${ATLAS_REPL}' ATLAS_SHRD='${ATLAS_SHRD}' ATLAS_FREE='${ATLAS_FREE}' ATLAS_TLS11='${ATLAS_TLS11}' ATLAS_TLS12='${ATLAS_TLS12}' \
          ATLAS_REPL_SRV='${ATLAS_REPL_SRV}' ATLAS_SHRD_SRV='${ATLAS_SHRD_SRV}' ATLAS_FREE_SRV='${ATLAS_FREE_SRV}' ATLAS_TLS11_SRV='${ATLAS_TLS11_SRV}' ATLAS_TLS12_SRV='${ATLAS_TLS12_SRV}' \
          sh ${PROJECT_DIRECTORY}/.evergreen/run-atlas-tests.sh

  "run serverless tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          set +o xtrace
          MONGODB_URI="${MONGODB_URI}" \
          SERVERLESS_ATLAS_USER="${SERVERLESS_ATLAS_USER}" \
          SERVERLESS_ATLAS_PASSWORD="${SERVERLESS_ATLAS_PASSWORD}" \
            sh ${PROJECT_DIRECTORY}/.evergreen/run-serverless-tests.sh

  "run ocsp test":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}

          MONGODB_URI="${MONGODB_URI}" \
          SWIFT_VERSION=${SWIFT_VERSION} \
          OCSP_TLS_SHOULD_SUCCEED="${OCSP_TLS_SHOULD_SUCCEED}" \
          OCSP_ALGORITHM="${OCSP_ALGORITHM}" \
            bash ${PROJECT_DIRECTORY}/.evergreen/run-ocsp-test.sh

  run-valid-ocsp-server:
    - command: shell.exec
      params:
        script: |
          set -o errexit
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          ${PYTHON} -m virtualenv ./venv
          ./venv/${VENV_BIN_DIR}/python3 -m pip install -r mock-ocsp-responder-requirements.txt
    - command: shell.exec
      type: setup
      params:
        background: true
        script: |
          set -o errexit

          cd ${DRIVERS_TOOLS}/.evergreen/ocsp

          ./venv/${VENV_BIN_DIR}/python3 ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ca.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ca.key \
          -p 8100 -v

  run-revoked-ocsp-server:
    - command: shell.exec
      type: setup
      params:
        script: |
          set -o errexit
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          ${PYTHON} -m virtualenv ./venv
          ./venv/${VENV_BIN_DIR}/python3 -m pip install -r mock-ocsp-responder-requirements.txt
    - command: shell.exec
      type: setup
      params:
        background: true
        script: |
          set -o errexit
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp

          ./venv/${VENV_BIN_DIR}/python3 ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ca.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ca.key \
          -p 8100 \
          -v \
          --fault revoked

  run-valid-delegate-ocsp-server:
    - command: shell.exec
      type: setup
      params:
        script: |
          set -o errexit
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          ${PYTHON} -m virtualenv ./venv
          ./venv/${VENV_BIN_DIR}/python3 -m pip install -r mock-ocsp-responder-requirements.txt
    - command: shell.exec
      type: setup
      params:
        background: true
        script: |
          set -o errexit
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp

          ./venv/${VENV_BIN_DIR}/python3 ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ocsp-responder.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ocsp-responder.key \
          -p 8100 -v

  run-revoked-delegate-ocsp-server:
    - command: shell.exec
      type: setup
      params:
        script: |
          set -o errexit
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          ${PYTHON} -m virtualenv ./venv
          ./venv/${VENV_BIN_DIR}/python3 -m pip install -r mock-ocsp-responder-requirements.txt
    - command: shell.exec
      type: setup
      params:
        background: true
        script: |
          set -o errexit

          cd ${DRIVERS_TOOLS}/.evergreen/ocsp

          ./venv/${VENV_BIN_DIR}/python3 ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ocsp-responder.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ocsp-responder.key \
          -p 8100 \
          -v \
          --fault revoked

  "cleanup":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS || true

  "fix absolute paths":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "install swift":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
            sh ${PROJECT_DIRECTORY}/.evergreen/install-swift.sh
  
  "format":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
            bash ${PROJECT_DIRECTORY}/.evergreen/install-tools.sh swiftformat
          SWIFT_VERSION=${SWIFT_VERSION} \
          ${PROJECT_DIRECTORY}/opt/swiftformat/.build/release/swiftformat --verbose --lint .
  
  "lint":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
            bash ${PROJECT_DIRECTORY}/.evergreen/install-tools.sh swiftlint
          LINUX_SOURCEKIT_LIB_PATH=${PROJECT_DIRECTORY}/opt/swiftenv/versions/${SWIFT_VERSION}/usr/lib \
            ${PROJECT_DIRECTORY}/opt/swiftlint/.build/release/swiftlint --strict --quiet
  
  "sourcery":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
            bash ${PROJECT_DIRECTORY}/.evergreen/install-tools.sh sourcery
          make linuxmain SOURCERY=${PROJECT_DIRECTORY}/opt/sourcery/bin/sourcery
          # use regex to ignore lines starting with a /
          git diff -G "^[^\/].*\n" --exit-code Tests/LinuxMain.swift
          make exports SOURCERY=${PROJECT_DIRECTORY}/opt/sourcery/bin/sourcery
          git diff -G "^[^\/].*\n" --exit-code Sources/MongoSwiftSync/Exports.swift

pre:
  - func: "fetch source"
  - func: "install swift"

post:
  - func: "stop mongo-orchestration"
  - func: "upload-mo-artifacts"
  - func: "upload test results"
  - func: "cleanup"

tasks:
    - name: "test-3.6-standalone"
      tags: ["3.6", "standalone"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "3.6"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.6-replica_set"
      tags: ["3.6", "replica_set"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "3.6"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.6-sharded_cluster"
      tags: ["3.6", "sharded_cluster"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "3.6"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-4.0-standalone"
      tags: ["4.0", "standalone"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.0-replica_set"
      tags: ["4.0", "replica_set"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.0-sharded_cluster"
      tags: ["4.0", "sharded_cluster"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-4.2-standalone"
      tags: ["4.2", "standalone"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.2"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.2-replica_set"
      tags: ["4.2", "replica_set"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.2"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.2-sharded_cluster"
      tags: ["4.2", "sharded_cluster"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.2"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-4.4-standalone"
      tags: ["4.4", "standalone"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.4"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.4-replica_set"
      tags: ["4.4", "replica_set"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.4"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.4-sharded_cluster"
      tags: ["4.4", "sharded_cluster"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "4.4"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-latest-standalone"
      tags: ["latest", "standalone"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-latest-replica_set"
      tags: ["latest", "replica_set"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "latest"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-latest-sharded_cluster"
      tags: ["latest", "sharded_cluster"]
      commands:
        - func: "prepare resources"
        - func: "fix absolute paths"
        - func: "bootstrap mongo-orchestration"
          vars:
            MONGODB_VERSION: "latest"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-atlas-connectivity"
      tags: ["atlas-connect"]
      commands:
        - func: "run atlas tests"

    - name: "test-serverless"
      tags: ["serverless"]
      commands:
        - func: "run serverless tests"

    - name: test-ocsp-rsa-valid-cert-server-staples
      tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
      commands:
        - func: "prepare resources"
        - func: "run-valid-ocsp-server"
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-invalid-cert-server-staples
      tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-valid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "prepare resources"
        - func: "run-valid-ocsp-server"
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-invalid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-soft-fail
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "prepare resources"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-malicious-invalid-cert-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-malicious-no-responder-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "prepare resources"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-delegate-valid-cert-server-staples
      tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
      commands:
        - func: "prepare resources"
        - func: run-valid-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-delegate-invalid-cert-server-staples
      tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-delegate-valid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "prepare resources"
        - func: run-valid-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-delegate-invalid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-delegate-malicious-invalid-cert-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-valid-cert-server-staples
      tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
      commands:
        - func: "prepare resources"
        - func: run-valid-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-invalid-cert-server-staples
      tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-valid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "prepare resources"
        - func: run-valid-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-invalid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-soft-fail
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "prepare resources"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-malicious-invalid-cert-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-malicious-no-responder-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "prepare resources"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-delegate-valid-cert-server-staples
      tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
      commands:
        - func: "prepare resources"
        - func: run-valid-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-delegate-invalid-cert-server-staples
      tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-delegate-valid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "prepare resources"
        - func: run-valid-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-delegate-invalid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-delegate-malicious-invalid-cert-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "prepare resources"
        - func: run-revoked-delegate-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: "run ocsp test"
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: "check-format"
      commands:
      - func: "format"

    - name: "check-lint"
      commands:
        - func: "lint"
    
    - name: "check-sourcery"
      commands:
        - func: "sourcery"

axes:
  - id: versions
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
           MONGODB_VERSION: "latest"
      - id: "4.4"
        display_name: "4.4"
        variables:
          MONGODB_VERSION: "4.4"      
      - id: "4.2"
        display_name: "4.2"
        variables:
          MONGODB_VERSION: "4.2"
      - id: "4.0"
        display_name: "4.0"
        variables:
           MONGODB_VERSION: "4.0"
      - id: "3.6"
        display_name: "3.6"
        variables:
           MONGODB_VERSION: "3.6"

  - id: os-fully-featured
    display_name: OS
    values:
      - id: ubuntu-18.04
        display_name: "Ubuntu 18.04"
        run_on: ubuntu1804-test
        variables:
          PYTHON: "/opt/mongodbtoolchain/v3/bin/python3"
          VENV_BIN_DIR: "bin"

      - id: ubuntu-16.04
        display_name: "Ubuntu 16.04"
        run_on: ubuntu1604-test
        variables:
          PYTHON: "/opt/mongodbtoolchain/v3/bin/python3"
          VENV_BIN_DIR: "bin"

      - id: macos-10.14
        display_name: "macOS 10.14"
        run_on: macos-1014
        variables:
          PYTHON: "/opt/mongodbtoolchain/v3/bin/python3"
          VENV_BIN_DIR: "bin"

  - id: topology
    display_name: Topology
    values:
      - id: standalone
        display_name: Standalone
        variables:
           TOPOLOGY: "server"
      - id: replicaset
        display_name: Replica Set
        variables:
           TOPOLOGY: "replica_set"
      - id: sharded-cluster
        display_name: Sharded Cluster
        variables:
           TOPOLOGY: "sharded_cluster"
  - id: swift-version
    display_name: "Swift"
    values:
      - id: "5.1"
        display_name: "Swift 5.1"
        variables:
           SWIFT_VERSION: "5.1.5"
      - id: "5.2"
        display_name: "Swift 5.2"
        variables:
           SWIFT_VERSION: "5.2.5"
      - id: "5.3"
        display_name: "Swift 5.3"
        variables:
          SWIFT_VERSION: "5.3.3"
      - id: "5.4-dev"
        display_name: "Swift 5.4-dev"
        variables:
          SWIFT_VERSION: "5.4-DEVELOPMENT-SNAPSHOT-2021-03-25-a"

  - id: ssl-auth
    display_name: SSL and Auth
    values:
      - id: ssl-auth
        display_name: SSL Auth
        variables:
          SSL: "ssl"
          AUTH: "auth"
      - id: nossl-noauth
        display_name: NoSSL NoAuth
        variables:
          SSL: "nossl"
          AUTH: "noauth"
    
  - id: auth
    display_name: Auth
    values:
      - id: auth
        display_name: Auth
        variables:
          AUTH: "auth"    

  - id: auth
    display_name: Auth
    values:
      - id: auth
        display_name: Auth
        variables:
          AUTH: "auth"

  - id: versionedAPI
    display_name: API Version
    values:
    # Test against a cluster with requireApiVersion=1.
      - id: requireApiVersion1
        display_name: Require V1
        variables:
          # REQUIRE_API_VERSION is set to make drivers-evergreen-tools
          # start a cluster with the requireApiVersion parameter.
          REQUIRE_API_VERSION: "1"
          # MONGODB_API_VERSION is the apiVersion to use in the test suite.
          MONGODB_API_VERSION: "1"
          # Test with auth to ensure we correctly append versioned API options
          # to authentication commands, since we can't test that via comamand
          # monitoring.
          AUTH: "auth"
    # Test against a cluster with acceptAPIVersion2 but without
    # requireApiVersion, and don't automatically add apiVersion to
    # clients created in the test suite.
      - id: acceptAPIVersion2
        display_name: Accept V2
        variables:
          ORCHESTRATION_FILE: "versioned-api-testing.json"
          TEST_FILTER: "VersionedAPITests"

task_groups:
  - name: serverless_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: "fetch source"
      - func: "install swift"
      - func: "prepare resources"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            ${PREPARE_SHELL}
            set +o xtrace
            SERVERLESS_DRIVERS_GROUP=${SERVERLESS_DRIVERS_GROUP} \
            SERVERLESS_API_PUBLIC_KEY=${SERVERLESS_API_PUBLIC_KEY} \
            SERVERLESS_API_PRIVATE_KEY=${SERVERLESS_API_PRIVATE_KEY} \
              bash ${DRIVERS_TOOLS}/.evergreen/serverless/create-instance.sh
      - command: expansions.update
        params:
          file: serverless-expansion.yml
    teardown_group:
      - command: shell.exec
        params:
          script: |
            ${PREPARE_SHELL}
            set +o xtrace
            SERVERLESS_DRIVERS_GROUP=${SERVERLESS_DRIVERS_GROUP} \
            SERVERLESS_API_PUBLIC_KEY=${SERVERLESS_API_PUBLIC_KEY} \
            SERVERLESS_API_PRIVATE_KEY=${SERVERLESS_API_PRIVATE_KEY} \
            SERVERLESS_INSTANCE_NAME=${SERVERLESS_INSTANCE_NAME} \
              bash ${DRIVERS_TOOLS}/.evergreen/serverless/delete-instance.sh
    tasks:
      - ".serverless"

buildvariants:

- matrix_name: "tests-all"
  matrix_spec:
    os-fully-featured: "*"
    swift-version:
      - "5.1"
      - "5.2"
    ssl-auth: "*"
  display_name: "${swift-version} ${os-fully-featured} ${ssl-auth}"
  tasks:
     - ".latest"
     - ".4.4"
     - ".4.2"
     - ".4.0"
     - ".3.6"
  rules:
  # pre 4.0 we are just using legacy linux mongoDB since ubuntu 18.04 didn't
  # exist when 3.6 came out. legacy doesn't link to OpenSSL so we can't run
  # SSL tests there.
  - if:
      os-fully-featured: "ubuntu-18.04"
      swift-version: "*"
      ssl-auth: "ssl-auth"
    then:
      remove_tasks: ".3.6"

- matrix_name: "atlas-connect"
  matrix_spec:
    os-fully-featured: "*"
    swift-version:
      - "5.1"
      - "5.2"
  display_name: "Atlas Connectivity ${swift-version} ${os-fully-featured}"
  tasks:
    - ".atlas-connect"

- matrix_name: "serverless"
  matrix_spec:
    os-fully-featured:
      - "ubuntu-18.04"
    swift-version:
      - 5.2
  display_name: "Serverless ${swift-version} ${os-fully-featured}"
  tasks:
    - "serverless_task_group"

- matrix_name: "ocsp"
  matrix_spec:
    os-fully-featured:
      - "ubuntu-18.04"
      - "ubuntu-16.04"
    versions:
      - latest
      - 4.4
    swift-version:
      - 5.2
  display_name: "OCSP ${swift-version} ${os-fully-featured} ${versions}"
  batchtime: 20160 # 14 days
  tasks:
    - ".ocsp"

- matrix_name: "ocsp-macos"
  matrix_spec:
    os-fully-featured:
      - macos-10.14
    swift-version:
      - 5.2
    versions:
      - latest
      - 4.4
  display_name: "OCSP ${swift-version} ${os-fully-featured} ${versions}"
  batchtime: 20160 # 14 days
  tasks:
      # macOS MongoDB servers do not staple OCSP responses and only support RSA.
      - name: ".ocsp-rsa !.ocsp-staple"

- matrix_name: "versioned-api-tests"
  matrix_spec:
    os-fully-featured: ubuntu-18.04
    swift-version: "5.3"
    auth: "auth"
    versionedAPI: "*"
  display_name: "Versioned API ${versionedAPI} ${swift-version} ${os-fully-featured}"
  batchtime: 10080  # 7 days
  tasks:
    # Versioned API was introduced in MongoDB 4.7
    - "test-latest-standalone"

# define separate matrices for swift 5.3 that excludes macOS 10.14. unfortunately
# as of now we cannot remove entire buildvariants via rule from the matrices above
# so we need to split this up due to inability to test 5.3 on macOS 10.14.
# see EVG-13092
- matrix_name: "tests-all-5.3+"
  matrix_spec:
    os-fully-featured:
      - "ubuntu-18.04"
      - "ubuntu-16.04"
    swift-version:
      - "5.3"
      - "5.4-dev"
    ssl-auth: "*"
  display_name: "${swift-version} ${os-fully-featured} ${ssl-auth}"
  tasks:
     - ".latest"
     - ".4.4"
     - ".4.2"
     - ".4.0"
     - ".3.6"
  rules:
  # pre 4.0 we are just using legacy linux mongoDB since ubuntu 18.04 didn't
  # exist when 3.6 came out. legacy doesn't link to OpenSSL so we can't run
  # SSL tests there.
  - if:
      os-fully-featured: "ubuntu-18.04"
      swift-version: "*"
      ssl-auth: "ssl-auth"
    then:
      remove_tasks: ".3.6"

- matrix_name: "atlas-connect-5.3+"
  matrix_spec:
    os-fully-featured:
      - "ubuntu-18.04"
      - "ubuntu-16.04"
    swift-version:
      - "5.3"
      - "5.4-dev"
  display_name: "Atlas Connectivity ${swift-version} ${os-fully-featured}"
  tasks:
    - ".atlas-connect"

- matrix_name: "format-lint"
  display_name: "Format and Lint"
  matrix_spec:
    os-fully-featured: "ubuntu-18.04"
    swift-version: "5.3"
  tasks:
    - name: "check-format"
    - name: "check-lint"

- matrix_name: "check-sourcery"
  display_name: "Check Sourcery"
  matrix_spec:
    os-fully-featured: "macos-10.14"
    swift-version: "5.2"
  tasks:
    - name: "check-sourcery"
